import { Markup } from 'telegraf';

import { CallbackContext } from '@/context';
import calendarInfo from '@/messages/calendarInfo';
import { createCalendar } from '@/utils/calendar';
import { studentList } from '@/utils/database';
import messageManager, { canEditMessage, clearMessagesAfter } from '@/utils/messageManager';

const ERROR_MESSAGE = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è';
const ERROR_KEYBOARD = Markup.inlineKeyboard([Markup.button.switchToCurrentChat('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', '')]);
const WAIT_MESSAGE = '–°–æ–∑–¥–∞—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ';

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç callback
 * @returns Promise<void>
 */
export default async function callbackStudent(ctx: CallbackContext): Promise<void> {
    const { data } = ctx.callbackQuery;
    const studentId = parseInt(data);
    const student = studentList.find((s) => s.id === studentId);

    if (!student) return await handleError(ctx, ERROR_MESSAGE);

    await ctx.answerCbQuery(WAIT_MESSAGE);

    if (await canEditMessage(ctx)) {
        await ctx.editMessageText(WAIT_MESSAGE);
    } else {
        await clearMessagesAfter(ctx);
        await ctx.reply(WAIT_MESSAGE).then((message) => {
            ctx.callbackQuery.message = message;
            return messageManager(ctx, message);
        });
    }

    const user = await ctx.user;
    const calendarId =
        user.calendarId ?? (await createCalendar({ summary: student.shortName }).catch((err) => console.error(err)));

    if (!calendarId) return await handleError(ctx, ERROR_MESSAGE);

    user.studentId = studentId;
    user.calendarId = calendarId;
    user.educationSpaceId = student.spaceID;

    return await calendarInfo(ctx, '–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≥–æ—Ç–æ–≤!');
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç callback
 * @param errorMessage –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @returns Promise<void>
 */
async function handleError(ctx: CallbackContext, errorMessage: string): Promise<void> {
    if (await canEditMessage(ctx)) {
        await ctx.editMessageText(errorMessage, ERROR_KEYBOARD);
        return;
    }

    await clearMessagesAfter(ctx);
    await ctx.reply(errorMessage, ERROR_KEYBOARD).then((message) => messageManager(ctx, message));
    return;
}
