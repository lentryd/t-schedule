import { Markup } from 'telegraf';
import { code, fmt } from 'telegraf/format';
import { Message } from 'telegraf/types';

import { CommandContext } from '@/context';
import calendarInfo from '@/messages/calendarInfo';
import { createCalendar, createRule } from '@/utils/calendar';
import { providersCollection, studentList } from '@/utils/database';
import messageManager from '@/utils/messageManager';
import Wrapper from '@/utils/wrapper';

import { updateStudentList } from '../synchronizeCalendar';

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /auth.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 * @returns Promise<void>
 */
export default async function commandAuth(ctx: CommandContext): Promise<void> {
    await messageManager(ctx);

    const { payload } = ctx;
    const [userName, password] = payload.split(' ');

    if (!payload || !userName || !password) {
        return await ctx
            .reply(
                fmt`–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth —Å –≤–∞—à–∏–º –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –æ—Ç –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–∞ edu.donstu.ru, –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${code(
                    '/auth login password'
                )}, –≥–¥–µ ${code('login')} - –≤–∞—à –ª–æ–≥–∏–Ω, –∞ ${code(
                    'password'
                )} - –≤–∞—à –ø–∞—Ä–æ–ª—å.\n\n–ü—Ä–∏–º–µ—Ä:\n/auth example@gmail.com 123456`
            )
            .then((message) => messageManager(ctx, message));
    }

    const message = await ctx.reply('–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ');
    const data = await Wrapper.tryAuth(userName, password);

    if (!data) {
        return await handleError(ctx, message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
    }

    const user = await ctx.user;

    user.studentId = data.studentId;
    user.educationSpaceId = data.spaceId;

    try {
        await providersCollection.add({
            userId: ctx.from.id,
            userName,
            password,
            accessToken: data.accessToken,
            educationSpaceId: data.spaceId,
        });
        await updateStudentList(true);
    } catch (e) {
        console.error(e);
    }

    const student = studentList.find((s) => s.id === data.studentId);

    user.calendarId ??= await createCalendar({
        summary: student?.shortName ?? ctx.from.first_name,
    }).catch((err) => (console.error(err), undefined));

    if (!user.calendarId) {
        return await handleError(ctx, message, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòî\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.');
    }

    await createRule(user.calendarId, userName).catch((err) => console.error(err));

    await ctx.deleteMessage(message.message_id);
    return await calendarInfo(ctx, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å!');
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
 * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã
 * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param errorMessage –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
 * @returns Promise<void>
 */
async function handleError(ctx: CommandContext, message: Message.TextMessage, errorMessage: string): Promise<void> {
    try {
        await ctx.telegram.editMessageText(
            message.chat.id,
            message.message_id,
            ctx.inlineMessageId,
            errorMessage,
            Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')])
        );
    } catch (e) {
        console.error(e);
        await ctx.deleteMessage(message.message_id).catch(() => void 0);
        return await ctx
            .reply(errorMessage, Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')]))
            .then((message) => messageManager(ctx, message));
    }
}
