import { createHash } from "crypto";
import nearestColor from "./colorize";
import {
  LessonsTypesResponse,
  RaspListResponse,
  RaspResponse,
} from "./wrapper";
import { Student, studentList } from "../utils/database";
import { calendar_v3 } from "@googleapis/calendar";

type StudentFormat = {
  fullName: string;
  department: string;
};
export function formatStudent(id: number): StudentFormat | undefined;
export function formatStudent(student: Student): StudentFormat;
export function formatStudent(
  arg: number | Student
): StudentFormat | undefined {
  let student: Student | undefined;
  if (typeof arg === "number")
    student = studentList.find(({ id }) => id == arg);
  else student = arg;
  if (!student) return undefined;

  return {
    fullName: student.fullName,
    department:
      student.course +
      " –∫—É—Ä—Å " +
      (student.spaceID == 1 ? "(–®–∫–æ–ª–∞ –ò–∫—Å)" : "(–¢-—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç)"),
  };
}

export type ScheduleFormat = {
  id?: string;
  raspId: string;
  etag: string;

  start: {
    dateTime: string;
    timeZone: string;
  };
  end: {
    dateTime: string;
    timeZone: string;
  };

  summary: string;
  colorId: string;
  location: string;
  description: string;
};
const REGEX_URL =
  /[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)?/gi;
const REGEX_ABBR = /(^.{2,}?)[aeiou–∞–µ—ë–∏–æ—É—ã—ç—é—è]/;
export function formatSchedule(
  raspItem: RaspListResponse["data"]["raspList"],
  lessonsTypes?: LessonsTypesResponse["data"]["lessonsTypes"]
): ScheduleFormat[] {
  return raspItem.map((item) => {
    const startDateTime = new Date(item.start).toISOString();
    const endDateTime = new Date(item.end).toISOString();
    const timeZone = "Europe/Moscow";

    let summary = item.name.trim();
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (item.info.type) {
      // –ò—â–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const lessonType = lessonsTypes?.find(
        (type) => type.label === item.info.type
      );
      // –ü–æ–ª—É—á–∞–µ–º –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—É —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
      let typeAbbr =
        lessonType?.abbreviation ??
        item.info.type.match(REGEX_ABBR)?.[1] ??
        item.info.type;
      // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
      typeAbbr = typeAbbr[0].toUpperCase() + typeAbbr.slice(1);

      // –ï—Å–ª–∏ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –æ–Ω–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—á–∞–ª–æ–º –Ω–∞–∑–≤–∞–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
      if (
        typeAbbr &&
        !(
          summary.split(" ")[0].toLowerCase().replace(/\./g, "") ===
          typeAbbr.toLowerCase().replace(/\./g, "")
        )
      ) {
        summary = typeAbbr + " " + summary;
      }
    }
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É
    if (item.info.isControlEvent) summary = "üìù " + summary;

    const colorId = nearestColor(item.color).toString();
    const location = item.info.aud ?? "";

    const descriptionList = [];
    if (item.info.moduleName) {
      descriptionList.push(item.info.moduleName);
    }
    if (item.info.theme) {
      descriptionList.push(item.info.theme + "\n");
    }
    if (item.info.groupName) {
      descriptionList.push(`–ì—Ä—É–ø–ø–∞: ${item.info.groupName}`);
    }
    if (item.info.link && REGEX_URL.test(item.info.link)) {
      const linkList = item.info.link.match(REGEX_URL);
      descriptionList.push(`–°—Å—ã–ª–∫–∏: ${linkList?.join(", ")}`);
    }
    if (item.info.teachers.length > 0) {
      const teacherLabel =
        item.info.teachers.length === 1 ? "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" : "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏";
      descriptionList.push(
        `${teacherLabel}: ${item.info.teachers
          .map((t) => `${t.fullName}` + (t.email ? ` (${t.email})` : ""))
          .join(", ")}`
      );
    }
    const description = descriptionList.join("\n").trim();

    return {
      raspId: hash([startDateTime, endDateTime, summary].join("-")),
      etag: hash([summary, location, description].join("-")),

      start: {
        dateTime: startDateTime,
        timeZone: timeZone,
      },
      end: {
        dateTime: endDateTime,
        timeZone: timeZone,
      },

      summary,
      colorId,
      location,
      description,
    };
  });
}
export function formatRasp(
  rasp: RaspResponse["data"]["rasp"]
): ScheduleFormat[] {
  return rasp.map((item) => {
    const startDateTime = new Date(item.–¥–∞—Ç–∞–ù–∞—á–∞–ª–∞ + "+03:00").toISOString();
    const endDateTime = new Date(item.–¥–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è + "+03:00").toISOString();
    const timeZone = "Europe/Moscow";

    let summary = item.–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞.trim();

    const colorId = "11";
    const location = item.–∞—É–¥–∏—Ç–æ—Ä–∏—è;

    const descriptionList = [];
    if (item.—Ç–µ–º–∞) {
      descriptionList.push(item.—Ç–µ–º–∞ + "\n");
    }
    if (item.–≥—Ä—É–ø–ø–∞) {
      descriptionList.push(`–ì—Ä—É–ø–ø–∞: ${item.–≥—Ä—É–ø–ø–∞}`);
    }
    if (item.—Å—Å—ã–ª–∫–∞ && REGEX_URL.test(item.—Å—Å—ã–ª–∫–∞)) {
      const linkList = item.—Å—Å—ã–ª–∫–∞.match(REGEX_URL);
      descriptionList.push(`–°—Å—ã–ª–∫–∏: ${linkList?.join(", ")}`);
    }
    if (item.–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å) {
      const teacherLabel =
        item.–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.split(",").length === 1
          ? "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"
          : "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏";
      descriptionList.push(`${teacherLabel}: ${item.–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å}`);
    }
    descriptionList.push(
      "\n–≠—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ edu.donsu.ru. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
    );
    const description = descriptionList.join("\n").trim();

    return {
      raspId: hash([startDateTime, endDateTime, summary].join("-")),
      etag: hash([summary, location, description].join("-")),

      start: {
        dateTime: startDateTime,
        timeZone: timeZone,
      },
      end: {
        dateTime: endDateTime,
        timeZone: timeZone,
      },

      summary,
      colorId,
      location,
      description,
    };
  });
}

export function formatEvent(
  event: calendar_v3.Schema$Event
): ScheduleFormat & { id: string } {
  const startDateTime =
    event.start?.dateTime && new Date(event.start.dateTime).toISOString();
  const endDateTime =
    event.end?.dateTime && new Date(event.end.dateTime).toISOString();

  return {
    id: event.id as string,
    raspId: hash([startDateTime, endDateTime, event.summary].join("-")),
    etag: hash([event.summary, event.location, event.description].join("-")),

    start: {
      dateTime: event.start?.dateTime as string,
      timeZone: event.start?.timeZone as string,
    },
    end: {
      dateTime: event.end?.dateTime as string,
      timeZone: event.end?.timeZone as string,
    },

    summary: event.summary as string,
    colorId: event.colorId as string,
    location: event.location as string,
    description: event.description as string,
  };
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ö—ç—à —Å—Ç—Ä–æ–∫–∏
 */
function hash(data: string) {
  return createHash("sha256").update(data).digest("hex");
}
